{"ast":null,"code":"function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as actions from \"../actions/actions\";\nvar initState = {\n  movies: [],\n  movie: {},\n  recommendedMovies: []\n};\nexport default function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actions.GET_MOVIE_LIST_SUCCESS:\n      return _objectSpread({}, state, {\n        movies: action.movies\n      });\n\n    case actions.GET_MOVIE_SUCCESS:\n      return _objectSpread({}, state, {\n        movie: action.movie\n      });\n\n    case actions.GET_RECOMMENDED_MOVIES_SUCCESS:\n      return _objectSpread({}, state, {\n        recommendedMovies: action.movies\n      });\n\n    case actions.SORT_MOVIES_SUCCESS:\n      return _objectSpread({}, state, {\n        movies: action.movies\n      });\n\n    case actions.SEARCH_MOVIES_SUCCESS:\n      return _objectSpread({}, state, {\n        movies: action.movies\n      });\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}